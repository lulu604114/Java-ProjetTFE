# =======================
# Shiro INI configuration
# =======================

[main]
# passing threw shiro login filter
authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter
# set login url
user.loginUrl = /login.xhtml
authc.loginUrl = /login.xhtml
# redirect url called after successful login
authc.successUrl = /app/dashboard.xhtml
# set un unauthorized url
roles.unauthorizedUrl = /access.xhtml

#ssl.enabled = false

# Use default password matcher (SHA-256, 500000 hash iterations)
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher

# DataSource Setup
datasource = org.apache.shiro.jndi.JndiObjectFactory
datasource.resourceName = java:comp/env/jdbc/jsf_tfe
datasource.resourceRef = true

# JDBC Realm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.authorizationCachingEnabled = false
jdbcRealm.authenticationQuery = SELECT password FROM Users WHERE username = ?

jdbcRealm.userRolesQuery = SELECT r.label FROM Roles r, Users u WHERE u.username = ? AND r.id = u.role
jdbcRealm.permissionsLookupEnabled = false
#jdbcRealm.permissionsQuery = SELECT permission_name FROM ROLES_PERMISSIONS WHERE role_name = ?
jdbcRealm.credentialsMatcher = $passwordMatcher
jdbcRealm.dataSource = $datasource

securityManager.realms = $jdbcRealm

[urls]
# filter setup for secured pages
/javax.faces.resource/** = anon
/login.xhtml = authc
/logout = logout
/* = ssl[8443]
/app/** = authc, roles[user]
/app/admin/** = authc, roles[admin]
# make page only available for role
;/admin/** = authc, roles[root]

